name: Auto-detect duplicate feature requests

on:
  discussion:
    types: [labeled, edited]

permissions:
  discussions: write
  models: read

jobs:
  detect-duplicates:
    runs-on: ubuntu-latest
    if: github.event.discussion.category.slug == 'integration-enhancements'
    
    steps:
      - name: Check if integration label was added and extract details
        id: extract
        uses: actions/github-script@v7
        with:
          script: |
            // Debug: Log the event payload
            console.log('Event name:', context.eventName);
            console.log('Event action:', context.payload.action);
            console.log('Event payload keys:', Object.keys(context.payload));
            
            // Handle both labeled and edited events
            if (context.payload.action === 'labeled') {
              // For labeled events, check the specific label that was added
              const addedLabel = context.payload.label;
              if (!addedLabel) {
                console.log('No label found in labeled event payload');
                core.setOutput('should_continue', 'false');
                return;
              }
              
              console.log(`Label added: ${addedLabel.name}`);
              
              if (!addedLabel.name.startsWith('integration:')) {
                console.log('Added label is not an integration label, skipping duplicate detection');
                core.setOutput('should_continue', 'false');
                return;
              }
              
              console.log(`Integration label added: ${addedLabel.name}`);
            } else if (context.payload.action === 'edited') {
              // For edited events, we need to check if any integration labels exist
              // This is a fallback in case labeled events don't work
              console.log('Discussion was edited, checking for integration labels');
              
              // Check if this edit was just about labels (not content)
              const changes = context.payload.changes;
              if (changes && !changes.title && !changes.body) {
                console.log('Edit appears to be label-only, proceeding with duplicate detection');
              } else {
                console.log('Edit includes content changes, this might be from auto-labeling');
              }
            } else {
              console.log(`Unsupported action: ${context.payload.action}`);
              core.setOutput('should_continue', 'false');
              return;
            }
            
            const discussion = await github.graphql(`
              query($nodeId: ID!) {
                node(id: $nodeId) {
                  ... on Discussion {
                    number
                    title
                    body
                    url
                    labels(first: 10) {
                      nodes {
                        name
                      }
                    }
                  }
                }
              }
            `, {
              nodeId: context.payload.discussion.node_id
            });
            
            const currentDiscussion = discussion.node;
            const integrationLabels = currentDiscussion.labels.nodes
              .filter(label => label.name.startsWith('integration:'))
              .map(label => label.name);
            
            // For edited events, only proceed if we have integration labels
            if (context.payload.action === 'edited' && integrationLabels.length === 0) {
              console.log('No integration labels found on edited discussion, skipping');
              core.setOutput('should_continue', 'false');
              return;
            }
            
            // Check if we've already posted a duplicate detection comment recently
            const comments = await github.graphql(`
              query($nodeId: ID!) {
                node(id: $nodeId) {
                  ... on Discussion {
                    comments(first: 10) {
                      nodes {
                        body
                        createdAt
                        author {
                          login
                        }
                      }
                    }
                  }
                }
              }
            `, {
              nodeId: context.payload.discussion.node_id
            });
            
            // Check if we've already posted a duplicate detection comment
            const recentDuplicateComment = comments.node.comments.nodes.find(comment => 
              comment.author && comment.author.login === 'github-actions[bot]' && 
              comment.body.includes('Potential Duplicate Detection')
            );
            
            if (recentDuplicateComment) {
              console.log('Already posted duplicate detection comment, skipping');
              core.setOutput('should_continue', 'false');
              return;
            }
            
            core.setOutput('should_continue', 'true');
            core.setOutput('current_number', currentDiscussion.number);
            core.setOutput('current_title', currentDiscussion.title);
            core.setOutput('current_body', currentDiscussion.body);
            core.setOutput('current_url', currentDiscussion.url);
            core.setOutput('integration_labels', JSON.stringify(integrationLabels));
            
            console.log(`Current discussion: #${currentDiscussion.number}`);
            console.log(`Integration labels: ${integrationLabels.join(', ')}`);

      - name: Fetch similar feature requests
        id: fetch_similar
        if: steps.extract.outputs.should_continue == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const integrationLabels = JSON.parse('${{ steps.extract.outputs.integration_labels }}');
            const currentNumber = parseInt('${{ steps.extract.outputs.current_number }}');
            
            if (integrationLabels.length === 0) {
              console.log('No integration labels found, skipping duplicate detection');
              core.setOutput('has_similar', 'false');
              return;
            }
            
            // Use GitHub search API to find discussions with matching integration labels
            console.log(`Searching for discussions with integration labels: ${integrationLabels.join(', ')}`);
            
            // Build search query for discussions with any of the current integration labels
            const labelQueries = integrationLabels.map(label => `label:"${label}"`);
            let searchQuery;
            
            if (labelQueries.length === 1) {
              searchQuery = `repo:${context.repo.owner}/${context.repo.repo} is:discussion ${labelQueries[0]}`;
            } else {
              searchQuery = `repo:${context.repo.owner}/${context.repo.repo} is:discussion (${labelQueries.join(' OR ')})`;
            }
            
            console.log(`Search query: ${searchQuery}`);
            
            const result = await github.graphql(`
              query($searchQuery: String!) {
                search(query: $searchQuery, type: DISCUSSION, first: 20) {
                  discussionCount
                  nodes {
                    ... on Discussion {
                      number
                      title
                      body
                      url
                      createdAt
                      labels(first: 10) {
                        nodes {
                          name
                        }
                      }
                    }
                  }
                }
              }
            `, {
              searchQuery: searchQuery
            });
            
            // Filter out the current discussion and map to our format
            const similarDiscussions = result.search.nodes
              .filter(d => d.number !== currentNumber) // Exclude current discussion
              .map(d => ({
                number: d.number,
                title: d.title,
                body: d.body,
                url: d.url,
                createdAt: d.createdAt,
                labels: d.labels.nodes.map(l => l.name)
              }));
            
            console.log(`Found ${similarDiscussions.length} discussions with matching integration labels`);
            
            if (similarDiscussions.length === 0) {
              core.setOutput('has_similar', 'false');
              return;
            }
            
            core.setOutput('has_similar', 'true');
            core.setOutput('similar_discussions', JSON.stringify(similarDiscussions.slice(0, 10))); // Limit to 10 most recent

      - name: Detect duplicates using AI
        id: ai_detection
        if: steps.extract.outputs.should_continue == 'true' && steps.fetch_similar.outputs.has_similar == 'true'
        uses: actions/ai-inference@v1
        with:
          model: openai/gpt-4o-mini
          system-prompt: |
            You are a Home Assistant feature request duplicate detector. Your task is to identify potential duplicate feature requests based on their content.
            
            Rules:
            1. Compare the current feature request with the provided similar requests
            2. Look for requests that ask for the same or very similar functionality
            3. Consider different wording but same underlying feature request as duplicates
            4. Return ONLY a JSON array of discussion numbers that are potential duplicates
            5. If no duplicates are found, return an empty array: []
            6. Maximum 5 potential duplicates
            7. Only include high-confidence matches (70%+ similarity in intent)
            
            Example response format:
            [1234, 5678, 9012]
            
          prompt: |
            Current feature request:
            Title: ${{ steps.extract.outputs.current_title }}
            Body: ${{ steps.extract.outputs.current_body }}
            
            Similar feature requests to compare against:
            ${{ steps.fetch_similar.outputs.similar_discussions }}
            
            Which of these similar requests are potential duplicates of the current request?
          
          max-tokens: 100

      - name: Post duplicate detection results
        id: post_results
        if: steps.extract.outputs.should_continue == 'true' && steps.fetch_similar.outputs.has_similar == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const aiResponse = '${{ steps.ai_detection.outputs.response }}';
            
            let duplicateNumbers = [];
            try {
              duplicateNumbers = JSON.parse(aiResponse.trim());
            } catch (error) {
              console.log('Failed to parse AI response:', aiResponse);
              return;
            }
            
            if (!Array.isArray(duplicateNumbers) || duplicateNumbers.length === 0) {
              console.log('No duplicates detected by AI');
              return;
            }
            
            console.log(`AI detected ${duplicateNumbers.length} potential duplicates: ${duplicateNumbers.join(', ')}`);
            
            // Get details of detected duplicates
            const similarDiscussions = JSON.parse('${{ steps.fetch_similar.outputs.similar_discussions }}');
            const duplicates = similarDiscussions.filter(d => duplicateNumbers.includes(d.number));
            
            if (duplicates.length === 0) {
              console.log('No matching discussions found for detected numbers');
              return;
            }
            
            // Create comment with duplicate detection results
            const duplicateLinks = duplicates.map(d => `- [#${d.number}: ${d.title}](${d.url})`).join('\n');
            
            const commentBody = [
              '🔍 **Potential Duplicate Detection**',
              '',
              'I\'ve analyzed similar feature requests and found the following potential duplicates:',
              '',
              duplicateLinks,
              '',
              '**What to do next:**',
              '1. Please review these discussions to see if they match your request',
              '2. If you find an existing request that covers your needs:',
              '   - Consider closing this discussion',
              '   - Add your thoughts/vote on the existing request instead',
              '3. If your request is different or adds new aspects, please clarify how it differs',
              '',
              'This helps keep our feature requests organized and ensures similar requests are consolidated for better visibility.',
              '',
              '*This message was generated automatically by our duplicate detection system.*'
            ].join('\n');

            await github.graphql(`
              mutation($discussionId: ID!, $body: String!) {
                addDiscussionComment(input: {
                  discussionId: $discussionId,
                  body: $body
                }) {
                  comment {
                    id
                  }
                }
              }
            `, {
              discussionId: context.payload.discussion.node_id,
              body: commentBody
            });
            
            console.log(`Posted duplicate detection comment with ${duplicates.length} potential duplicates`);