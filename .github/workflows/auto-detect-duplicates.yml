name: Auto-detect duplicate feature requests

on:
  discussion:
    types: [labeled]

permissions:
  discussions: write
  models: read

jobs:
  detect-duplicates:
    runs-on: ubuntu-latest
    if: github.event.discussion.category.slug == 'integration-enhancements' && startsWith(github.event.discussion.label.name, 'integration:')
    
    steps:
      - name: Extract current discussion details
        id: extract
        uses: actions/github-script@v7
        with:
          script: |
            const discussion = await github.graphql(`
              query($nodeId: ID!) {
                node(id: $nodeId) {
                  ... on Discussion {
                    number
                    title
                    body
                    url
                    labels(first: 10) {
                      nodes {
                        name
                      }
                    }
                  }
                }
              }
            `, {
              nodeId: context.payload.discussion.node_id
            });
            
            const currentDiscussion = discussion.node;
            const integrationLabels = currentDiscussion.labels.nodes
              .filter(label => label.name.startsWith('integration:'))
              .map(label => label.name);
            
            core.setOutput('current_number', currentDiscussion.number);
            core.setOutput('current_title', currentDiscussion.title);
            core.setOutput('current_body', currentDiscussion.body);
            core.setOutput('current_url', currentDiscussion.url);
            core.setOutput('integration_labels', JSON.stringify(integrationLabels));
            
            console.log(`Current discussion: #${currentDiscussion.number}`);
            console.log(`Integration labels: ${integrationLabels.join(', ')}`);

      - name: Fetch similar feature requests
        id: fetch_similar
        uses: actions/github-script@v7
        with:
          script: |
            const integrationLabels = JSON.parse('${{ steps.extract.outputs.integration_labels }}');
            const currentNumber = parseInt('${{ steps.extract.outputs.current_number }}');
            
            if (integrationLabels.length === 0) {
              console.log('No integration labels found, skipping duplicate detection');
              core.setOutput('has_similar', 'false');
              return;
            }
            
            // Fetch discussions with same integration labels
            const similarDiscussions = [];
            
            for (const label of integrationLabels) {
              console.log(`Searching for discussions with label: ${label}`);
              
              const result = await github.graphql(`
                query($owner: String!, $name: String!, $labels: [String!]) {
                  repository(owner: $owner, name: $name) {
                    discussions(
                      first: 20
                      categoryId: "${context.payload.discussion.category.node_id}"
                      labels: $labels
                      orderBy: {field: CREATED_AT, direction: DESC}
                    ) {
                      nodes {
                        number
                        title
                        body
                        url
                        createdAt
                        labels(first: 10) {
                          nodes {
                            name
                          }
                        }
                      }
                    }
                  }
                }
              `, {
                owner: context.repo.owner,
                name: context.repo.repo,
                labels: [label]
              });
              
              const discussions = result.repository.discussions.nodes
                .filter(d => d.number !== currentNumber) // Exclude current discussion
                .map(d => ({
                  number: d.number,
                  title: d.title,
                  body: d.body,
                  url: d.url,
                  createdAt: d.createdAt,
                  labels: d.labels.nodes.map(l => l.name)
                }));
              
              similarDiscussions.push(...discussions);
            }
            
            // Remove duplicates based on discussion number
            const uniqueDiscussions = Array.from(
              new Map(similarDiscussions.map(d => [d.number, d])).values()
            );
            
            console.log(`Found ${uniqueDiscussions.length} similar discussions`);
            
            if (uniqueDiscussions.length === 0) {
              core.setOutput('has_similar', 'false');
              return;
            }
            
            core.setOutput('has_similar', 'true');
            core.setOutput('similar_discussions', JSON.stringify(uniqueDiscussions.slice(0, 10))); // Limit to 10 most recent

      - name: Detect duplicates using AI
        id: ai_detection
        if: steps.fetch_similar.outputs.has_similar == 'true'
        uses: actions/ai-inference@v1
        with:
          model: openai/gpt-4o-mini
          system-prompt: |
            You are a Home Assistant feature request duplicate detector. Your task is to identify potential duplicate feature requests based on their content.
            
            Rules:
            1. Compare the current feature request with the provided similar requests
            2. Look for requests that ask for the same or very similar functionality
            3. Consider different wording but same underlying feature request as duplicates
            4. Return ONLY a JSON array of discussion numbers that are potential duplicates
            5. If no duplicates are found, return an empty array: []
            6. Maximum 5 potential duplicates
            7. Only include high-confidence matches (70%+ similarity in intent)
            
            Example response format:
            [1234, 5678, 9012]
            
          prompt: |
            Current feature request:
            Title: ${{ steps.extract.outputs.current_title }}
            Body: ${{ steps.extract.outputs.current_body }}
            
            Similar feature requests to compare against:
            ${{ steps.fetch_similar.outputs.similar_discussions }}
            
            Which of these similar requests are potential duplicates of the current request?
          
          max-tokens: 100

      - name: Post duplicate detection results
        id: post_results
        if: steps.fetch_similar.outputs.has_similar == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const aiResponse = '${{ steps.ai_detection.outputs.response }}';
            
            let duplicateNumbers = [];
            try {
              duplicateNumbers = JSON.parse(aiResponse.trim());
            } catch (error) {
              console.log('Failed to parse AI response:', aiResponse);
              return;
            }
            
            if (!Array.isArray(duplicateNumbers) || duplicateNumbers.length === 0) {
              console.log('No duplicates detected by AI');
              return;
            }
            
            console.log(`AI detected ${duplicateNumbers.length} potential duplicates: ${duplicateNumbers.join(', ')}`);
            
            // Get details of detected duplicates
            const similarDiscussions = JSON.parse('${{ steps.fetch_similar.outputs.similar_discussions }}');
            const duplicates = similarDiscussions.filter(d => duplicateNumbers.includes(d.number));
            
            if (duplicates.length === 0) {
              console.log('No matching discussions found for detected numbers');
              return;
            }
            
            // Create comment with duplicate detection results
            const duplicateLinks = duplicates.map(d => `- [#${d.number}: ${d.title}](${d.url})`).join('\n');
            
            const commentBody = [
              'üîç **Potential Duplicate Detection**',
              '',
              'I\'ve analyzed similar feature requests and found the following potential duplicates:',
              '',
              duplicateLinks,
              '',
              '**What to do next:**',
              '1. Please review these discussions to see if they match your request',
              '2. If you find an existing request that covers your needs:',
              '   - Consider closing this discussion',
              '   - Add your thoughts/vote on the existing request instead',
              '3. If your request is different or adds new aspects, please clarify how it differs',
              '',
              'This helps keep our feature requests organized and ensures similar requests are consolidated for better visibility.',
              '',
              '*This message was generated automatically by our duplicate detection system.*'
            ].join('\n');

            await github.graphql(`
              mutation($discussionId: ID!, $body: String!) {
                addDiscussionComment(input: {
                  discussionId: $discussionId,
                  body: $body
                }) {
                  comment {
                    id
                  }
                }
              }
            `, {
              discussionId: context.payload.discussion.node_id,
              body: commentBody
            });
            
            console.log(`Posted duplicate detection comment with ${duplicates.length} potential duplicates`);