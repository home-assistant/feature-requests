name: Auto-label integration enhancements

on:
  discussion:
    types: [created, edited]

permissions:
  discussions: write
  models: read

jobs:
  label-integration:
    runs-on: ubuntu-latest
    if: github.event.discussion.category.slug == 'integration-enhancements'
    
    steps:
      - name: Extract integration name and details
        id: extract
        uses: actions/github-script@v7
        with:
          script: |
            // For edited discussions, we need to fetch the full discussion body
            let body = '';
            if (context.eventName === 'discussion' && context.payload.action === 'edited') {
              // Fetch the full discussion details
              const discussion = await github.graphql(`
                query($nodeId: ID!) {
                  node(id: $nodeId) {
                    ... on Discussion {
                      body
                    }
                  }
                }
              `, {
                nodeId: context.payload.discussion.node_id
              });
              body = discussion.node.body;
            } else {
              body = context.payload.discussion.body;
            }
            
            console.log(`Event: ${context.eventName}, Action: ${context.payload.action}`);
            console.log(`Body length: ${body.length}`);
            console.log(`First 300 chars of body: ${body.substring(0, 300)}`);
            
            // Extract integration name - handle single newline
            const integrationMatch = body.match(/###\s*Integration name\s*\n\s*(.+?)(?=\n\s*\n|\n###|$)/s);
            const integrationName = integrationMatch ? integrationMatch[1].trim() : '';
            
            // Extract integration link - handle "_No response_" as empty
            const linkMatch = body.match(/###\s*Link to integration documentation on our website\s*\n\s*(.+?)(?=\n\s*\n|\n###|$)/s);
            const integrationLink = linkMatch && linkMatch[1].trim() !== '_No response_' ? linkMatch[1].trim() : '';
            
            // Extract enhancement description
            const descriptionMatch = body.match(/###\s*Describe the enhancement\s*\n\s*([\s\S]+?)(?=\n###|$)/);
            const enhancementDescription = descriptionMatch ? descriptionMatch[1].trim() : '';
            
            console.log(`Extracted - Name: "${integrationName}", Link: "${integrationLink}", Description: "${enhancementDescription.substring(0, 50)}..."`);
            
            core.setOutput('integration_name', integrationName);
            core.setOutput('integration_link', integrationLink);
            core.setOutput('enhancement_description', enhancementDescription);
            core.setOutput('full_body', body);
            
            console.log(`Integration name: ${integrationName}`);
            console.log(`Integration link: ${integrationLink}`);
            console.log(`Enhancement description: ${enhancementDescription.substring(0, 100)}...`);

      - name: Find matching integrations
        id: find_integrations
        uses: actions/github-script@v7
        with:
          script: |
            const integrationName = '${{ steps.extract.outputs.integration_name }}';
            const integrationLink = '${{ steps.extract.outputs.integration_link }}';
            
            // Fetch all integrations
            const response = await fetch('https://next.home-assistant.io/integrations.json');
            const integrations = await response.json();
            
            // Try to extract domain from link first
            let domain = '';
            if (integrationLink) {
              const linkMatch = integrationLink.match(/\/integrations\/([^\/]+)/);
              if (linkMatch) {
                domain = linkMatch[1];
                if (integrations[domain]) {
                  core.setOutput('domain', domain);
                  core.setOutput('found', 'exact');
                  console.log(`Found exact match from link: ${domain}`);
                  return;
                }
              }
            }
            
            // Function to normalize strings by removing diacritics
            const normalize = (str) => {
              return str.normalize('NFD').replace(/[\u0300-\u036f]/g, '').toLowerCase();
            };
            
            // Search by name
            const searchName = integrationName.toLowerCase();
            const searchNameNormalized = normalize(integrationName);
            const matches = [];
            
            for (const [key, value] of Object.entries(integrations)) {
              const title = value.title.toLowerCase();
              const titleNormalized = normalize(value.title);
              const keyLower = key.toLowerCase();
              
              // Exact matches (with or without diacritics)
              if (title === searchName || titleNormalized === searchNameNormalized || 
                  keyLower === searchName || keyLower === searchNameNormalized) {
                core.setOutput('domain', key);
                core.setOutput('found', 'exact');
                console.log(`Found exact match by name: ${key}`);
                return;
              }
              
              // Partial matches (with normalized comparison)
              if (title.includes(searchName) || searchName.includes(title) || 
                  titleNormalized.includes(searchNameNormalized) || searchNameNormalized.includes(titleNormalized) ||
                  keyLower.includes(searchName.replace(/\s+/g, '_')) || 
                  searchName.includes(keyLower)) {
                matches.push({ domain: key, title: value.title });
              }
            }
            
            if (matches.length === 1) {
              // Single match, use it
              core.setOutput('domain', matches[0].domain);
              core.setOutput('found', 'single');
              console.log(`Found single match: ${matches[0].domain}`);
            } else if (matches.length > 1) {
              // Multiple matches, need AI help
              core.setOutput('found', 'multiple');
              core.setOutput('matches', JSON.stringify(matches.slice(0, 5)));
              console.log(`Found ${matches.length} partial matches`);
            } else {
              core.setOutput('found', 'none');
              console.log('No matches found');
            }
            
            // Create a complete list of integrations for AI
            const allIntegrations = Object.entries(integrations)
              .map(([domain, data]) => `${domain}: ${data.title}`)
              .join('\n');
            
            core.setOutput('integration_list', allIntegrations);
            console.log(`Prepared ${Object.keys(integrations).length} integrations for AI`);

      - name: Determine integration using AI
        id: ai_inference
        if: steps.find_integrations.outputs.found == 'multiple' || steps.find_integrations.outputs.found == 'none'
        uses: actions/ai-inference@v1
        with:
          system-prompt: |
            You are a Home Assistant integration classifier. Your task is to identify the correct integration domain name from the given information.
            
            Rules:
            1. Return ONLY the integration domain name (e.g., "mqtt", "hue", "zwave_js", "homekit")
            2. Use the exact domain key from the complete integrations list provided
            3. If multiple matches exist, choose the most likely one based on the integration title/name
            4. Take into account the integration title/name might be misspelled or have diacritics
            5. If you cannot determine the integration, return "unknown"
            6. Do not include any explanation, just the domain name
            
          prompt: |
            Available Home Assistant integrations (domain: title):
            ${{ steps.find_integrations.outputs.integration_list }}
            
            Full user request:
            ${{ steps.extract.outputs.full_body }}
            
            What is the integration domain name?
          
          max-tokens: 500

      - name: Set final domain
        id: set_domain
        uses: actions/github-script@v7
        with:
          script: |
            const found = '${{ steps.find_integrations.outputs.found }}';
            let domain = '';
            
            if (found === 'exact' || found === 'single') {
              domain = '${{ steps.find_integrations.outputs.domain }}';
            } else {
              domain = '${{ steps.ai_inference.outputs.response }}'.trim().toLowerCase();
            }
            
            core.setOutput('domain', domain);
            console.log(`Final domain: ${domain}`);

      - name: Apply integration label
        uses: actions/github-script@v7
        with:
          script: |
            const integrationDomain = '${{ steps.set_domain.outputs.domain }}';
            
            if (integrationDomain && integrationDomain !== 'unknown') {
              const labelName = `integration: ${integrationDomain}`;
              
              // Check if the label exists
              let labelExists = false;
              try {
                await github.rest.issues.getLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: labelName
                });
                labelExists = true;
              } catch (e) {
                if (e.status !== 404) throw e;
              }
              
              if (labelExists) {
                // Get current labels using GraphQL
                const discussionData = await github.graphql(`
                  query($nodeId: ID!) {
                    node(id: $nodeId) {
                      ... on Discussion {
                        labels(first: 100) {
                          nodes {
                            name
                          }
                        }
                      }
                    }
                  }
                `, {
                  nodeId: context.payload.discussion.node_id
                });
                
                const currentLabels = discussionData.node.labels.nodes;
                const hasLabel = currentLabels.some(label => label.name === labelName);
                
                if (!hasLabel) {
                  // Get the label ID first
                  const { data: labelData } = await github.rest.issues.getLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: labelName
                  });
                  
                  // Add the label to the discussion using GraphQL
                  await github.graphql(`
                    mutation($labelableId: ID!, $labelIds: [ID!]!) {
                      addLabelsToLabelable(input: {
                        labelableId: $labelableId,
                        labelIds: $labelIds
                      }) {
                        labelable {
                          id
                        }
                      }
                    }
                  `, {
                    labelableId: context.payload.discussion.node_id,
                    labelIds: [labelData.node_id]
                  });
                  
                  console.log(`Applied label: ${labelName}`);
                  
                  // Add a comment to notify about the label
                  await github.graphql(`
                    mutation($discussionId: ID!, $body: String!) {
                      addDiscussionComment(input: {
                        discussionId: $discussionId,
                        body: $body
                      }) {
                        comment {
                          id
                        }
                      }
                    }
                  `, {
                    discussionId: context.payload.discussion.node_id,
                    body: `🏷️ I've automatically added the \`${labelName}\` label to help categorize this feature request.`
                  });
                } else {
                  console.log(`Label ${labelName} already exists on discussion`);
                }
              } else {
                console.log(`Label ${labelName} does not exist in the repository`);
                
                // Optionally notify that the label doesn't exist
                await github.graphql(`
                  mutation($discussionId: ID!, $body: String!) {
                    addDiscussionComment(input: {
                      discussionId: $discussionId,
                      body: $body
                    }) {
                      comment {
                        id
                      }
                    }
                  }
                `, {
                  discussionId: context.payload.discussion.node_id,
                  body: `⚠️ I detected this is about the \`${integrationDomain}\` integration, but the label \`${labelName}\` doesn't exist yet. It will be created during the next label sync.`
                });
              }
            } else {
              console.log('Could not determine integration domain');
            }